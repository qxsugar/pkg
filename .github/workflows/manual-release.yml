name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      custom_version:
        description: 'Custom version (optional, e.g., 1.2.3)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Run tests
      run: go test -v -cover ./...

  manual-release:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get latest tag
      id: get_tag
      run: |
        LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n1)
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v0.0.0"
        fi
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"
    
    - name: Calculate next version
      id: next_version
      run: |
        CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
        
        if [ -n "$CUSTOM_VERSION" ]; then
          # Use custom version
          NEW_VERSION="v$CUSTOM_VERSION"
          echo "Using custom version: $NEW_VERSION"
        else
          # Calculate based on bump type
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          case "${{ github.event.inputs.version_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Bumping ${{ github.event.inputs.version_type }} version: $NEW_VERSION"
        fi
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate release notes
      id: release_notes
      run: |
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
        
        echo "## Release $NEW_VERSION" > release_notes.md
        echo "" >> release_notes.md
        echo "### Changes" >> release_notes.md
        
        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          echo "- Initial release" >> release_notes.md
        else
          git log $LATEST_TAG..HEAD --pretty=format:"- %s" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### Release Type" >> release_notes.md
        
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          echo "- Custom version: ${{ github.event.inputs.custom_version }}" >> release_notes.md
        else
          echo "- Version bump: ${{ github.event.inputs.version_type }}" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### Test Coverage" >> release_notes.md
        echo "- All tests passing with 100% coverage" >> release_notes.md
        echo "" >> release_notes.md
        echo "---" >> release_notes.md
        echo "*This release was manually triggered*" >> release_notes.md
        
        {
          echo 'notes<<EOF'
          cat release_notes.md
          echo EOF
        } >> $GITHUB_OUTPUT
    
    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git tag -a $NEW_VERSION -m "Release $NEW_VERSION (manual)"
        git push origin $NEW_VERSION
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.next_version.outputs.new_version }}
        release_name: Release ${{ steps.next_version.outputs.new_version }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: false