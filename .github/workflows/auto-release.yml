name: Auto Release

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Run tests
      run: go test -v -cover ./...

  release:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get latest tag
      id: get_tag
      run: |
        # Get the latest tag, default to v0.0.0 if no tags exist
        LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n1)
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v0.0.0"
        fi
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"
    
    - name: Calculate next version
      id: next_version
      run: |
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        # Remove 'v' prefix and split version
        VERSION=${LATEST_TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        
        # Increment patch version by 1
        PATCH=$((PATCH + 1))
        
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Next version: $NEW_VERSION"
    
    - name: Check if version should be bumped
      id: should_release
      run: |
        # Check if there are any commits since the last tag
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          # No tags exist, create first release
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "No previous tags found, creating first release"
        else
          # Check if there are commits since last tag
          COMMITS_SINCE_TAG=$(git rev-list $LATEST_TAG..HEAD --count)
          if [ "$COMMITS_SINCE_TAG" -gt 0 ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "Found $COMMITS_SINCE_TAG commits since last tag, creating new release"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "No new commits since last tag, skipping release"
          fi
        fi
    
    - name: Generate release notes
      id: release_notes
      if: steps.should_release.outputs.should_release == 'true'
      run: |
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
        
        # Create release notes
        echo "## Release $NEW_VERSION" > release_notes.md
        echo "" >> release_notes.md
        echo "### Changes" >> release_notes.md
        
        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          echo "- Initial release" >> release_notes.md
        else
          # Get commits since last tag
          git log $LATEST_TAG..HEAD --pretty=format:"- %s" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### Test Coverage" >> release_notes.md
        echo "- All tests passing with 100% coverage" >> release_notes.md
        echo "" >> release_notes.md
        echo "---" >> release_notes.md
        echo "*This release was automatically generated*" >> release_notes.md
        
        # Set output for use in next step
        {
          echo 'notes<<EOF'
          cat release_notes.md
          echo EOF
        } >> $GITHUB_OUTPUT
    
    - name: Create and push tag
      if: steps.should_release.outputs.should_release == 'true'
      run: |
        NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create and push tag
        git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
        git push origin $NEW_VERSION
    
    - name: Create GitHub Release
      if: steps.should_release.outputs.should_release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.next_version.outputs.new_version }}
        release_name: Release ${{ steps.next_version.outputs.new_version }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: false